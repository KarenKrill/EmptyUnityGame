name: MainWorkflow

on:
  push:
    branches: [ "main" ]
    tags:
      - '*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ "main" ]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch: # to run manually

jobs:
  MultiplatformBuild:
    name: Deploy to GitHub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Event name
        run: echo Triggered by ${{ github.event_name }}
      - name: Print Git push event
        if: github.event_name == 'push'
        run: echo "${{ github.event.push }}"
      - name: Print ref
        run: echo ${{ github.ref }}
      - name: Print ref name
        run: echo ${{ github.ref_name }}
      - name: Print Git pull request event
        if: github.event_name == 'pull_request'
        run: echo "${{ github.event.pull_request }}"
      - name: Print gh list
        run: echo $(gh run list)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Obtain version info
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo $(git tag --sort "-creatordate")
          echo MAJOR_VERSION=$(echo ${{ github.ref_name }} | cut -d. -f1 | sed -e "s/^v//") >> $GITHUB_ENV
          echo MINOR_VERSION=$(echo ${{ github.ref_name }} | cut -d. -f2) >> $GITHUB_ENV
          echo PATCH_VERSION=$(echo ${{ github.ref_name }} | cut -d. -f3) >> $GITHUB_ENV
          echo PREVIOUS_MAJOR_VERSION=$(git tag --sort "-creatordate" | cut -d$'\n' -f2 | cut -d. -f1 | sed -e "s/^v//") >> $GITHUB_ENV
          echo PREVIOUS_MINOR_VERSION=$(git tag --sort "-creatordate" | cut -d$'\n' -f2 | cut -d. -f2) >> $GITHUB_ENV
          echo PREVIOUS_PATCH_VERSION=$(git tag --sort "-creatordate" | cut -d$'\n' -f2 | cut -d. -f3) >> $GITHUB_ENV
      - name: Create release
        if: startsWith(github.ref, 'refs/tags/') && env.MAJOR_VERSION
        run: |
          echo CurrentVerison = ${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ env.PATCH_VERSION }}
          echo PreviousVerison = ${{ env.PREVIOUS_MAJOR_VERSION }}.${{ env.PREVIOUS_MINOR_VERSION }}.${{ env.PREVIOUS_PATCH_VERSION }}
